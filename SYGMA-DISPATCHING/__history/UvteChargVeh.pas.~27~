unit UvteChargVeh;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.StdCtrls, Vcl.Buttons,
  Vcl.Grids, Vcl.ExtCtrls, Vcl.ComCtrls, Data.FMTBcd, Data.DB, Data.SqlExpr;

type
  TfrmvteChargVeh = class(TForm)
    Splitter1: TSplitter;
    Panel1: TPanel;
    GroupBox4: TGroupBox;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    cbSource: TComboBox;
    edLot: TEdit;
    DateCharg: TDateTimePicker;
    rgType: TRadioGroup;
    GroupBox3: TGroupBox;
    Label7: TLabel;
    Label3: TLabel;
    lbChauf: TLabel;
    Label9: TLabel;
    Label1: TLabel;
    edCodeLivreur: TEdit;
    edNomLivreur: TEdit;
    edChauf: TEdit;
    edPiece: TEdit;
    edNumMat: TEdit;
    edNomCamion: TEdit;
    edPtac: TEdit;
    GroupBox1: TGroupBox;
    Label12: TLabel;
    Label2: TLabel;
    Label13: TLabel;
    edcodeClt: TEdit;
    edNomClt: TEdit;
    edzone: TEdit;
    edPrixZone: TEdit;
    cbPoint: TComboBox;
    GroupBox2: TGroupBox;
    Label5: TLabel;
    Label6: TLabel;
    Label8: TLabel;
    v_edcodeArt: TEdit;
    v_edDesign: TEdit;
    edqte: TEdit;
    StringGrid1: TStringGrid;
    Panel2: TPanel;
    label11: TLabel;
    lbTbout: TLabel;
    Label4: TLabel;
    lbTkilo: TLabel;
    lbMontant: TLabel;
    Label10: TLabel;
    Panel3: TPanel;
    SpeedButton1: TSpeedButton;
    SpeedButton2: TSpeedButton;
    Button3: TButton;
    Button4: TButton;
    Button2: TButton;
    PopupMenu1: TPopupMenu;
    Supprimer1: TMenuItem;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure edCodeLivreurDblClick(Sender: TObject);
    procedure edNumMatDblClick(Sender: TObject);
    procedure edcodeCltDblClick(Sender: TObject);
    procedure cbPointCloseUp(Sender: TObject);
    procedure v_edcodeArtDblClick(Sender: TObject);
    procedure edqteKeyPress(Sender: TObject; var Key: Char);
    procedure SpeedButton1Click(Sender: TObject);
    procedure SpeedButton2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure StringGrid1DrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
    procedure edChaufDblClick(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Déclarations privées }
    procedure SaveCleaner();

  public
    { Déclarations publiques }
  end;

var
  frmvteChargVeh: TfrmvteChargVeh;

implementation

{$R *.dfm}

uses UConnexion, records, UDM, URechLivreurChargement, UVteChargVehRechVeh,
  URechCltChargCamion, UrechVenteChargVeh, URechChaufVteChargCeh;

procedure TfrmvteChargVeh.Button2Click(Sender: TObject);
begin
if  MessageDlg('Etes-vous certain de vouloir clôturer ce lot ?',mtWarning,[mbYes,mbNo],0) = mrYes then
  begin
    CloturerCleaner;
    FormShow(sender);
  end;
end;

procedure TfrmvteChargVeh.Button3Click(Sender: TObject);
var
  numCharg : integer;
  vteCharg : TvteChargVeh;
  vteChargd : TvteChargVehd;
  I: Integer;
  PSqlCam,SqlUpCam,
  SqlUpLiv,SqlUpStock,code_art,date_op : string;
  stockCam : TStockCamion;
  stock :TStock;
  article : TArticle;

  sortie :TSortie;
  SelectMouv,
  insertMouv,
  UpdateMouv :TMouvStock;

  Qte_vide,
  Qte_mag,
  Qte_totale: integer;

  LivraisonCamion : TLivraisonCamion;
begin
  numCharg :=dm.SelectMaxCharg.NnumMax +1 ;

  if DateToStr(DateCharg.Date) = '31/12/2000' then
    begin
      MessageDlg('Merci de spécifier la date du chargement', mtError,[mbRetry],0);
      exit
    end else
  if rgType.ItemIndex = -1  then
    begin
      MessageDlg('Merci de spécifier le type du chargement', mtError,[mbRetry],0);
      exit
    end else
  if edCodeLivreur.Text = ''   then
    begin
      MessageDlg('Merci de sélectionner le livreur ', mtError,[mbRetry],0);
      exit
    end else
  if edNumMat.Text = '' then
    begin
      MessageDlg('Merci de selectionner un camion', mtError,[mbRetry],0);
      exit
    end else
  if edChauf.Text='' then
  begin
     MessageDlg('Merci de selectionner le chauffeur ', mtError,[mbRetry],0);
     exit
  end else
  if edPiece.Text='' then
  begin
    MessageDlg('Merci de spécifier le numéro de la pièce ', mtError,[mbRetry],0);
    exit
  end else
  if edcodeClt.Text='' then
  begin
    MessageDlg('Merci de sélectionner le client ', mtError,[mbRetry],0);
    exit
  end else
  if edPrixZone.Text='' then
  begin
    MessageDlg('Merci de spécifier la zone du client ', mtError,[mbRetry],0);
    exit
  end else
  if StringGrid1.RowCount = 1 then
  begin
    MessageDlg('Aucun article n''a été selectionné pour être ajouter', mtError,[mbRetry],0);
    exit
  end else
  if MessageDlg('Voulez-vous valider ce chargement ?',mtConfirmation,[mbYes,mbNo],0) = mrYes then
  begin
    {Insertion dans la table chargement camion}
    with  vteCharg do
      begin
        Slettrage := QuotedStr(edLot.Text);
        NnumCharg := numCharg;
        NSrc_charg:=cbSource.ItemIndex;
        ScodClient := QuotedStr(edcodeClt.Text);
        SnomClient := QuotedStr(edNomClt.Text);
        SPiece := QuotedStr(edPiece.Text);
        SVehicule := QuotedStr(edNumMat.Text);
        NnumMatChauf:=StrToInt(edChauf.Text);
        SnomChauf:=QuotedStr(lbChauf.Caption);
        SdateCharg := DateToStr(DateCharg.Date);
        NTboutteille := StrToInt(lbTbout.Caption);
        RTKilo := StrToFloat(lbTkilo.Caption);
        RMontant :=StrToFloat(lbMontant.Caption);
        SUsager := vUsager;
        NStatut_canc := 0;
        NStatut_com := 0;
      end;
      dm.InsertVteChargVeh(vteCharg);

      {Insertion de l'en-tête du chargement camion tb_livraison_camion}

        with LivraisonCamion do
          begin
             Sdate_charg := QuotedStr(FormatDateTime('yyyy-mm-dd',DateCharg.Date));
             Slettrage := QuotedStr(edLot.Text);
             Nnum_charg := numCharg;
             Scode_liv := QuotedStr(edCodeLivreur.Text);
             Snom_liv := QuotedStr(edNomLivreur.Text);
             Scode_clt := QuotedStr(edcodeClt.Text);
             Snom_clt := QuotedStr(edNomClt.Text);
             Scamion := QuotedStr(edNumMat.Text);
             Spièce := QuotedStr(edPiece.Text);
             SB3A := QuotedStr('');
             SB3  := QuotedStr('');
             SB6 := QuotedStr('');
             SB6R := QuotedStr('');
             SB12 := QuotedStr('');
             SB50 := QuotedStr('');
             SB25 := QuotedStr('');
             SB6E := QuotedStr('');
             SB12E := QuotedStr('');
             SRB3A := QuotedStr('');
             SRB3 := QuotedStr('');
             SRB6 := QuotedStr('');
             SRB6R := QuotedStr('');
             SRB12 := QuotedStr('');
             SRB50 := QuotedStr('');
             SRB25 := QuotedStr('');
             SRB6E := QuotedStr('');
             SRB12E := QuotedStr('');
             SType := QuotedStr('');
             Rmontant := StrToFloat(lbMontant.Caption);
             Rkilo_t := StrToFloat(lbTkilo.Caption);
             Szone_liv:=QuotedStr(edzone.Text);
             Rprix_zone:=StrToFloat(edPrixZone.Text);
             Rprix_liv:=StrToFloat(edPrixZone.Text)*StrToFloat(lbTkilo.Caption);
             Susager := QuotedStr(vUsager);
          end;
          dm.InsertLivraisonCamion(LivraisonCamion);

      for I := 1 to StringGrid1.RowCount-1 do
        begin
          {Insertion dans la table details chargement camion}
          with vteChargd ,StringGrid1 do
            begin
              NnumCharg := numCharg;
              ScodeArt := QuotedStr(Cells[0,i]);
              SdesignationArt := QuotedStr(Cells[1,i]) ;
              Nqte := StrToInt(Cells[3,i]) ;
              Rkilo := StrToFloat(Cells[2,i]) ;
              RTkilo := StrToFloat(Cells[3,i]) * StrToFloat(Cells[2,i]);
            end;
            dm.InsertVteChargVehd(vteChargd);

            //selection des quantité en stoock
            PSqlCam := ' Where vehicule = '+QuotedStr(edNumMat.Text)
                        +' and code_art = '+QuotedStr(StringGrid1.Cells[0,i]);

            code_art := StringGrid1.Cells[0,i];

            stockCam := dm.selectStockCamion(PSqlCam);
            stock := dm.selectStockByArticle(code_art);
            article := dm.selectArticleByCode(code_art);

            if rgType.ItemIndex=1 then //Si le chargement est à destination des clients du camion
              begin


                  if stockCam.Scode_art.IsEmpty then {Insertion dans la table stock camion}
                    begin
                      with stockCam,StringGrid1 do
                        begin
                          Svehicule:=edNumMat.Text;
                          Scode_art:=Cells[0,i];
                          SDesignation_art := Cells[1,i];
                          NQte_vide := 0;
                          NQte_mag := StrToInt(Cells[3,i]);
                          Nqte_total := StrToInt(Cells[3,i]);
                        end;
                        dm.InsertStockCamion(stockCam);
                    end
                  else {Mise à jour des quantités dans le camion}
                  begin
                    Qte_vide := stockCam.NQte_vide;
                    Qte_mag := stockCam.NQte_mag;
                    Qte_totale := stockCam.Nqte_total;

                    SqlUpCam := 'Update tb_stock_camion set'
                                +' qte_vide = '+IntToStr(Qte_vide - StrToInt(StringGrid1.Cells[3,i]))+','
                                +' qte_mag = '+IntToStr(Qte_mag + StrToInt(StringGrid1.Cells[3,i]))  //+','
                  //              +' qte_total = '+IntToStr(Qte_totale + StrToInt(StringGrid1.Cells[3,i]))
                                +' where code_art = '+QuotedStr(StringGrid1.Cells[0,i])
                                +' and vehicule = '+QuotedStr(edNumMat.Text);

                    dm.UpdateTable(SqlUpCam);
                  end;
              end;
                {Modification de la quantité dans la table des états tb_livraison_camion}

          if article.Stype_art = 'Charge gaz butane' then //si c'est une charge, renseigner le retour bouteille
            SqlUpLiv := 'update tb_livraison_camion set '
                          +StringGrid1.Cells[4,i]+'='+QuotedStr(StringGrid1.Cells[3,i])+','
                          +StringGrid1.Cells[5,i]+'='+QuotedStr(StringGrid1.Cells[3,i]) +','
                          +'type_ch = '+QuotedStr('Ch')
                          +' where num_charg = '+IntToStr(numCharg)
          else
            SqlUpLiv := 'update tb_livraison_camion set ' //Si c'est pas une charge, mettre la retour bouteille à vide
                          +StringGrid1.Cells[4,i]+'='+QuotedStr(StringGrid1.Cells[3,i])+','
                          +' type_ch = '+QuotedStr('Co')
                          +' where num_charg = '+IntToStr(numCharg);

          dm.UpdateTable(SqlUpLiv);

          //Modification du stock  de production si le chargement vient de la production
          if (cbSource.ItemIndex = 0) and (article.Stype_art = 'Charge gaz butane') then
            begin
              SqlUpStock := 'Update tb_stock set'
                          +' qte_vide = '+IntToStr(stock.NQte_vide + StrToInt(StringGrid1.Cells[3,i]))+','
                          +' qte_mag = '+IntToStr(stock.NQte_mag - StrToInt(StringGrid1.Cells[3,i]))+','
                          +' qte_totale = '+IntToStr(stock.Nqte_total - StrToInt(StringGrid1.Cells[3,i]))
                          +' where code_art = '+QuotedStr(StringGrid1.Cells[0,i]);
              dm.UpdateTable(SqlUpStock);
            end else
          if (cbSource.ItemIndex = 0) and (article.Stype_art <> 'Charge gaz butane') then
            begin
              SqlUpStock := 'Update tb_stock set'
            //              +' qte_vide = '+IntToStr(stock.NQte_vide + StrToInt(StringGrid1.Cells[3,i]))+','
                          +' qte_mag = '+IntToStr(stock.NQte_mag - StrToInt(StringGrid1.Cells[3,i])) +','
                          +' qte_totale = '+IntToStr(stock.Nqte_total - StrToInt(StringGrid1.Cells[3,i]))
                          +' where code_art = '+QuotedStr(StringGrid1.Cells[0,i]);
              dm.UpdateTable(SqlUpStock);
            end;

            {Ecriture dans la table de sortie tb_sortie}

            With sortie do
              Begin
                SCode_art := code_art;
                Scode_mag := article.Scode_mag;
                NQte_sortie := StrToInt(StringGrid1.Cells[3,i]);
                SUsager := vUsager;
                Ddate_sortie := DateToStr(Now);
              End;
              dm.InsertSortie(sortie);
            {Ecriture dans la table des mouvement du stock TmouvemntStock}

            date_op:= DateToStr(Now);

            SelectMouv := dm.selectMouvStock(code_art,date_op,article.Scode_mag);

           if (SelectMouv.Ddate_mouv.IsEmpty) then
            Begin
                with insertMouv do
                  begin
                   // NidMouvStock := SelectMouv.NidMouvStock;
                    Ddate_mouv := DateToStr(Now);
                    Scode_art := code_art;
                    Scode_mag := article.Scode_mag;
                    Nqte_entree := 0;
                    Nqte_sortie := StrToInt(StringGrid1.Cells[3,i]) ;
                  end;
                  dm.insertMouvStock(insertMouv);
            End else
      //    if (StrToDate(SelectMouv.Ddate_mouv) = StrToDateTime(edDate.Text)) and (code_art = SelectMouv.Scode_art) then
            begin
              with UpdateMouv do
                begin
                  NidMouvStock := SelectMouv.NidMouvStock;
                  Ddate_mouv := SelectMouv.Ddate_mouv;
                  Scode_art := SelectMouv.Scode_art;
                  Scode_mag := SelectMouv.Scode_mag;
                  Nqte_entree := SelectMouv.Nqte_entree;
                  Nqte_sortie := SelectMouv.Nqte_sortie+StrToInt(StringGrid1.Cells[3,i]) ;
                end;
                dm.Update_moovStock(UpdateMouv);
            end ;
        end; //fin for
        SaveCleaner;
  end;
end;

procedure TfrmvteChargVeh.SaveCleaner();
var
  I: Integer;
begin
  edqte.Clear;
  edPiece.Clear;
  lbTbout.Caption:='0';
  lbTkilo.Caption:='0';
  lbMontant.Caption:='0';

  edcodeClt.Clear;
  edNomClt.Clear;
  cbPoint.Items.Clear;
  edzone.Clear;
  edPrixZone.Clear;

  StringGrid1.RowCount:=1;
  StringGrid1.Rows[1].Clear;
  rgType.ItemIndex := -1;
end;


procedure TfrmvteChargVeh.Button4Click(Sender: TObject);
begin
SaveCleaner;
end;

procedure TfrmvteChargVeh.cbPointCloseUp(Sender: TObject);
var
  Sql : string;
  query : TSQLQuery;
begin

 query:= TSQLQuery.Create(self);
 query.SQLConnection := dm.SQLConnection1;

 sql := 'select * from tb_point_vente tpv '
      +' inner join tb_zone tz on tpv.zone = tz.nom_zone '
      +' where tpv.nom_point = '+QuotedStr(cbPoint.Text);

 try
   query.SQL.Add(sql);
   query.Open;

   edzone.Text := query.FieldByName('zone').AsString;
   edPrixZone.Text := query.FieldByName('prix_zone').AsString;
 finally
  query.Free;
  dm.SQLConnection1.Close;
 end;
end;

procedure TfrmvteChargVeh.edChaufDblClick(Sender: TObject);
begin
vFormSource := 'frmvteChargVeh';
frmRechChaufVteChargCeh.ShowModal;
end;

procedure TfrmvteChargVeh.edcodeCltDblClick(Sender: TObject);
begin
vFormSource_clt := 'frmvteChargVeh';
frmRechCltChargCamion.ShowModal;
end;

procedure TfrmvteChargVeh.edCodeLivreurDblClick(Sender: TObject);
begin
vSourceForm_liv := 'frmvteChargVeh';
frmRechLivreurChargement.showmodal;
end;

procedure TfrmvteChargVeh.edNumMatDblClick(Sender: TObject);
begin
vSourceForm := 'frmvteChargVeh';
frmVteChargVehRechVeh.ShowModal;
end;

procedure TfrmvteChargVeh.edqteKeyPress(Sender: TObject; var Key: Char);
var
  nbLigne : integer;
  I,vTBout: Integer;
  vTkg : real;
  stock : TStock;
  code_art : string;
begin
  if (Key=#13) then
    begin
      if (edqte.Text<>'') and (v_edcodeArt.Text<>'') then
         begin
            code_art := v_edcodeArt.Text;
            stock := dm.selectStockByArticle(code_art)  ;
            lbMontant.Caption := FloatToStr(StrToFloat(lbMontant.Caption) + (stock.Rcoutachat * StrToInt(edqte.Text)));

            nbLigne :=StringGrid1.RowCount+1;
            with StringGrid1 do
              begin
                RowCount := nbLigne;
                Cells[0,nbLigne-1]:=v_edcodeArt.Text;
                Cells[1,nbLigne-1]:=v_edDesign.Text;
                Cells[2,nbLigne-1]:=vkilo;
                Cells[3,nbLigne-1]:=edqte.Text;
                Cells[4,nbLigne-1]:=vAlias_art;
                Cells[5,nbLigne-1]:=vAlias_ret;
              end;
              if StringGrid1.RowCount>1 then StringGrid1.FixedRows:=1;

             vTBout := 0;
             vTkg := 0;

          for I := 1 to StringGrid1.RowCount-1 do
            begin
              vTBout := vTBout + StrToInt(StringGrid1.Cells[3,i]) ;
              vTkg := vTkg+ StrToFloat(StringGrid1.Cells[2,i])* StrToFloat(StringGrid1.Cells[3,i]);
            end;

            lbTbout.Caption := IntToStr(vTBout);
            lbTkilo.Caption := FloatToStr(vTkg);

            v_edcodeArt.Clear;
            v_edDesign.Clear;
            edqte.Clear;

          end //fin if key
          else
            MessageDlg('Merci de selectionner un article et d''entrer sa quantité',mtError,[mbOK],0);
    end;
end;

procedure TfrmvteChargVeh.FormCreate(Sender: TObject);
begin
with StringGrid1 do
  begin
    Cells[0,0]:='Code';
    Cells[1,0]:='Designation';
    Cells[2,0]:='Kg';
    Cells[3,0]:='Qte';
    Cells[4,0]:='Alias';
    Cells[5,0]:='Alias ret';
  end;

end;

procedure TfrmvteChargVeh.FormShow(Sender: TObject);
begin
  edLot.Text := vUsager+IntToStr(dm.SelectMaxLettrage.numLettrage+1) ;
//  DateCharg.Date := Now;
  DateCharg.Checked:=false;

end;

procedure TfrmvteChargVeh.SpeedButton1Click(Sender: TObject);
begin
  if MessageDlg('Voulez-vous changer de lot ?',mtConfirmation,[mbYes,mbNo],0) = mrYes then
    begin
      edLot.Text := IntToStr(StrToInt(edLot.Text)-1);
    end;
end;

procedure TfrmvteChargVeh.SpeedButton2Click(Sender: TObject);
begin
  if MessageDlg('Voulez-vous changer de lot ?',mtConfirmation,[mbYes,mbNo],0) = mrYes then
    begin
      edLot.Text := IntToStr(StrToInt(edLot.Text)+1) ;
    end;
end;

procedure TfrmvteChargVeh.StringGrid1DrawCell(Sender: TObject; ACol,
  ARow: Integer; Rect: TRect; State: TGridDrawState);
begin
    with Sender As TStringGrid do with canvas do
    begin
      { selection de la couleur de fond}
      if gdFixed in State then
        Brush.Color:=clBtnFace
      else
        if gdSelected in State then
          Brush.Color:=clNavy//$00000046
        else
          if Odd(ARow) then
            Brush.Color :=$006A9BFF//$FFE0FF clgreen
          else
            Brush.Color:=$00FBDA97;//$FFFFE0  clBlue
      {Design du fond}
      FillRect(Rect);
      {Selection de la couleur d'ecriture}
      if gdSelected in State then
        font.Color:=clwhite
        else
        font.Color:=clblack;
      {Design du texte}
      TextOut(Rect.Left,Rect.Top,Cells[ACol,ARow]);
    end;

end;

procedure TfrmvteChargVeh.v_edcodeArtDblClick(Sender: TObject);
begin
frmrechVenteChargVeh.ShowModal;
end;

end.
