unit UPayementFacture;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.FMTBcd, Vcl.Menus, frxClass,
  frxDBSet, Data.DB, Data.SqlExpr, Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Grids;

type
  TfrmPayementFacture = class(TForm)
    Panel1: TPanel;
    StringGrid1: TStringGrid;
    Panel3: TPanel;
    GroupBox1: TGroupBox;
    edRechNumFact: TEdit;
    edRechNomClt: TEdit;
    Panel2: TPanel;
    Bevel1: TBevel;
    Label2: TLabel;
    Label8: TLabel;
    Label3: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label9: TLabel;
    Label12: TLabel;
    Label10: TLabel;
    Label6: TLabel;
    Label4: TLabel;
    Label7: TLabel;
    Label11: TLabel;
    Label5: TLabel;
    eddate: TEdit;
    cbTypEncais: TComboBox;
    edFacture: TEdit;
    cb_bk: TComboBox;
    edCodeBk: TEdit;
    edcodeclt: TEdit;
    edLibEncais: TEdit;
    ednomclt: TEdit;
    cbCaisse: TComboBox;
    edCompte: TEdit;
    edMontant_T: TEdit;
    edOperation: TEdit;
    edmontantReste: TEdit;
    edMontant: TEdit;
    Button1: TButton;
    Button2: TButton;
    frxRecuCaisse: TfrxReport;
    QRecu: TSQLQuery;
    frxDBRecuCaisse: TfrxDBDataset;
    PopupMenu1: TPopupMenu;
    Forage1: TMenuItem;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure edRechNumFactChange(Sender: TObject);
    procedure edRechNomCltChange(Sender: TObject);
    procedure StringGrid1DblClick(Sender: TObject);
    procedure StringGrid1DrawCell(Sender: TObject; ACol, ARow: Integer;
      Rect: TRect; State: TGridDrawState);
  private
    { Déclarations privées }
  public
    { Déclarations publiques }
  end;

var
  frmPayementFacture: TfrmPayementFacture;
  vMnt_t,
  vMnt_p,
  vMnt_r,
  vCaisse_solde  : real;

implementation

{$R *.dfm}

uses records, UDM, UConnexion;

procedure TfrmPayementFacture.edRechNomCltChange(Sender: TObject);
var
  factures : TFacturationArray;
  i:integer;
  Psql : string;
begin
  Psql := ' Where nom_clt like '+QuotedStr('%'+edRechNomClt.Text+'%')
          +' and statut_canc = 0'
          +' and usager = '+QuotedStr(vUsager)
          +' order by date_fact desc';

  factures:=dm.SelectFactures(Psql);
  StringGrid1.RowCount := Length(factures)+1;

  for I := Low(factures) to High(factures) do
    begin
      with StringGrid1 do
        begin
          Cells[0,i+1]:=factures[i].Sdate_fact;
          Cells[1,i+1]:=factures[i].SNum_fact;
          Cells[2,i+1]:=factures[i].Scode_clt;
          Cells[3,i+1]:=factures[i].Snom_clt;
          Cells[4,i+1]:=FloatToStr(factures[i].Rmnt_t);
          Cells[5,i+1]:=FloatToStr(factures[i].Rmnt_p);
          Cells[6,i+1]:=FloatToStr(factures[i].Rmnt_r);
          Cells[7,i+1]:=factures[i].Sstatut;
        end;
    end;
    if StringGrid1.RowCount > 1 then StringGrid1.FixedRows := 1;
end;

procedure TfrmPayementFacture.edRechNumFactChange(Sender: TObject);
var
  factures : TFacturationArray;
  i:integer;
  Psql : string;
begin

//  if edRechNumFact.Text<>'' then
//    begin
//      edRechNomClt.Clear;
//      edRechNomClt.Enabled:=false;
//    end else
//    begin
//      edRechNomClt.Enabled:=True;
//    end;


  Psql := ' Where num_fact like '+QuotedStr('%'+edRechNumFact.Text+'%')
          +' and statut_canc = 0'
          +' and usager = '+QuotedStr(vUsager)
          +' order by date_fact desc';

  factures:=dm.SelectFactures(Psql);
  StringGrid1.RowCount := Length(factures)+1;

  for I := Low(factures) to High(factures) do
    begin
      with StringGrid1 do
        begin
          Cells[0,i+1]:=factures[i].Sdate_fact;
          Cells[1,i+1]:=factures[i].SNum_fact;
          Cells[2,i+1]:=factures[i].Scode_clt;
          Cells[3,i+1]:=factures[i].Snom_clt;
          Cells[4,i+1]:=FloatToStr(factures[i].Rmnt_t);
          Cells[5,i+1]:=FloatToStr(factures[i].Rmnt_p);
          Cells[6,i+1]:=FloatToStr(factures[i].Rmnt_r);
          Cells[7,i+1]:=factures[i].Sstatut;
        end;
    end;
    if StringGrid1.RowCount > 1 then StringGrid1.FixedRows := 1;
end;

procedure TfrmPayementFacture.FormCreate(Sender: TObject);
begin
with StringGrid1 do
  begin
    Cells[0,0]:='Date';
    Cells[1,0]:='Facture';
    Cells[2,0]:='Code' ;
    Cells[3,0]:='Client' ;
    Cells[4,0]:='Montant';
    Cells[5,0]:='Payé';
    Cells[6,0]:='Reste';
    Cells[7,0]:='Statut';
  end;

end;

procedure TfrmPayementFacture.FormShow(Sender: TObject);
var
  Psql : string;
  factures : TFacturationArray;
  I,k: Integer;

  PsqlCaisse : string;
  Caisses : TCaisseArray;

  Maxope :Integer;

  Tencs :  TTypeEncaissementArray;
  PsqlTencs : string;

  BKs :TBankArray;
  SqlBk,dat :string;
  user : TUser;
begin
  cbCaisse.Clear;
  cbTypEncais.Clear;
  edLibEncais.Clear;

  { Liste des banques }
  SqlBk :='';
  BKs := dm.SelectBank(SqlBk);

  for I := Low(BKs) to High(BKs) do
    begin
      cb_bk.Items.Add(BKs[i].SNom_bk);
    end;

//**************** Affichage du type d'encaissement
  PsqlTencs :='';
  Tencs := dm.SelectTypeEncaissement(PsqlTencs);
  cbTypEncais.Items.Add('A Selectionner');//La preniere
  for I := Low(Tencs) to High(Tencs) do
    begin
      cbTypEncais.Items.Add(Tencs[i].Slibelle_tenc);
    end;
    cbTypEncais.ItemIndex := 0;

//  if cbTypEncais.Text='ESPECE' then edLibEncais.Text := 'Encaissement de facture en espèce';
  { Selection automatique de la caisse de l'utilisateur}
  PsqlCaisse := ' where usager = '+QuotedStr(vUsager);
  user := dm.selectUser(PsqlCaisse);
  edCompte.Text := user.Snum_caisse;
  dat := DateToStr(now);

//******************************* Affichage dans la grid
  Psql := ' where statut_canc = 0'
//          +' and date_fact between '+QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDate(dat))+' 00:00:00')
          +' and '+QuotedStr(FormatDateTime('yyyy-mm-dd',StrToDate(dat))+' 23:59:59')
          +' and usager = '+QuotedStr(vUsager)
          +' Order by id_fact desc '   ;
  factures := DM.SelectFactures(Psql);

  StringGrid1.RowCount:=Length(factures)+1;

  for I := Low(factures) to High(factures) do
    begin
      with StringGrid1 do
        begin
          Cells[0,i+1]:=factures[i].Sdate_fact;
          Cells[1,i+1]:=factures[i].SNum_fact;
          Cells[2,i+1]:=factures[i].Scode_clt;
          Cells[3,i+1]:=factures[i].Snom_clt;
          Cells[4,i+1]:=FloatToStr(factures[i].Rmnt_t);
          Cells[5,i+1]:=FloatToStr(factures[i].Rmnt_p);
          Cells[6,i+1]:=FloatToStr(factures[i].Rmnt_r);
          Cells[7,i+1]:=factures[i].Sstatut;
        end;
    end;

    if StringGrid1.RowCount>1 then StringGrid1.FixedRows := 1;

//*********************** Selection de caisse***************
{    PsqlCaisse := '';
    Caisses := DM.SelectCaisses(PsqlCaisse);

    for k := Low(Caisses) to High(Caisses) do
      begin
        cbCaisse.Items.Add(Caisses[k].Snom);
      end;  }
//**********************Selection de la caisse de l'utilisateur*********

  PsqlCaisse := ' where usager = '+QuotedStr(vUsager);
  user := dm.selectUser(PsqlCaisse);
  edCompte.Text := user.Snum_caisse;

//***********************
eddate.Text:=DateTimeToStr(Now);

  Maxope := DM.SelectMaxOpe.NMaxOpe;
  Maxope := Maxope +1;
  edOperation.Text := 'ope'+IntToStr(Maxope)


end;

procedure TfrmPayementFacture.StringGrid1DblClick(Sender: TObject);
begin
  with StringGrid1 do
    begin
      if Cells[7,Row]<>'Payée' then
        begin
          edFacture.Text:=Cells[1,Row];
          edcodeclt.Text:=Cells[2,Row];
          ednomclt.Text:=Cells[3,Row];
          edMontant_T.Text:=Cells[4,Row];
          edmontantReste.Text:=Cells[6,Row];

          vMnt_p := StrToFloat(Cells[5,Row]);
          vMnt_r := StrToFloat(Cells[6,Row]);
          vMnt_t := StrToFloat(Cells[4,Row])
        end else
        begin
          MessageDlg('Cette facture a déjà été payée', mtWarning,[mbok],0);
        end;

        if Cells[6, Row]='0' then
          begin
            edMontant.ReadOnly := True;
            edMontant.Text := 'Soldé';
            edMontant.Color:=clred;
            edMontant.Font.Color := clWhite;
          end else
          begin
            edMontant.ReadOnly:= False;
            edMontant.Clear;
            edMontant.ParentColor := True;
            edMontant.Font.Color := clblack;

            edMontant.SetFocus;
          end;
    end;

end;

procedure TfrmPayementFacture.StringGrid1DrawCell(Sender: TObject; ACol,
  ARow: Integer; Rect: TRect; State: TGridDrawState);
begin
    with Sender As TStringGrid do with canvas do
    begin
      { selection de la couleur de fond}
      if gdFixed in State then
        Brush.Color:=clBtnFace
      else
        if gdSelected in State then
          Brush.Color:=clNavy//$00000046
        else
          if Odd(ARow) then
            Brush.Color :=$006A9BFF//$FFE0FF clgreen
          else
            Brush.Color:=$00FBDA97;//$FFFFE0  clBlue
      {Design du fond}
      FillRect(Rect);
      {Selection de la couleur d'ecriture}
      if gdSelected in State then
        font.Color:=clwhite
        else
        font.Color:=clblack;
      {Design du texte}
      TextOut(Rect.Left,Rect.Top,Cells[ACol,ARow]);
    end;
end;

end.
