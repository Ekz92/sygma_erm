unit USaisieFactureService;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.FMTBcd, frxClass, frxDBSet,
  Data.DB, Data.SqlExpr, Vcl.Menus, Vcl.Grids, Vcl.ExtCtrls, Vcl.StdCtrls,
  Vcl.ComCtrls;

type
  TfrmSaisieFactureService = class(TForm)
    GbClient: TGroupBox;
    Label7: TLabel;
    Label10: TLabel;
    Label9: TLabel;
    ednomClt: TEdit;
    edCodeClt: TEdit;
    eddate: TDateTimePicker;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    cbTypeService: TComboBox;
    edCodeTypeSce: TEdit;
    GroupBox2: TGroupBox;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    edDesign_sce: TEdit;
    edpu: TEdit;
    edqte: TEdit;
    Button1: TButton;
    Button2: TButton;
    Panel1: TPanel;
    Label6: TLabel;
    lbMontant: TLabel;
    Button3: TButton;
    Button4: TButton;
    st_factureService: TStringGrid;
    PopupMenu1: TPopupMenu;
    Supprimercetteligne1: TMenuItem;
    frxFacturationService: TfrxReport;
    QFacture: TSQLQuery;
    frxQFactureService: TfrxDBDataset;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cbTypeServiceCloseUp(Sender: TObject);
    procedure edCodeCltDblClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Déclarations privées }
  public
    { Déclarations publiques }
  end;

var
  frmSaisieFactureService: TfrmSaisieFactureService;
  vMnt_t,
  vMnt_p,
  vMnt_r  : real;
  vQteTotal : integer;

implementation

{$R *.dfm}

uses records, UDM, USelectClientFacturation;

procedure TfrmSaisieFactureService.Button1Click(Sender: TObject);
var
  k,i :integer;
begin
  if (edCodeTypeSce.Text<>'') and (trim(edDesign_sce.Text)<>'') and (StrToFloat(edpu.Text)<>0) and (StrToInt(edqte.Text)<>0) then
    begin
      with st_factureService do
        begin
          RowCount := RowCount+1;
          k:=RowCount-1;
          Cells[0,k]:= edDesign_sce.Text;
          Cells[1,k]:= edpu.Text;
          Cells[2,k]:= edqte.Text;
          Cells[3,k]:= FloatToStr(StrToInt(edqte.Text)*StrToFloat(edpu.Text));
          Cells[4,k]:=edCodeTypeSce.Text;
          if RowCount>1 then FixedRows:=1;
        end;
      edCodeTypeSce.Clear;

    //  Calcul des totaux
      vMnt_t := 0;
      vQteTotal := 0;

      for I := 1 to st_factureService.RowCount-1 do
        begin
          vMnt_t := vMnt_t + StrToFloat(st_factureService.Cells[3,i]);
          vQteTotal := vQteTotal + StrToInt(st_factureService.Cells[2,i]);
        end;
        lbMontant.Caption:=FloatToStrF(vMnt_t,ffNumber,15,2);
        Button2.Click;
    end else
    MessageDlg('Veillez renseigner tous les champs et selectionner le type de service',
                mtError,[mbok],0);
end;

procedure TfrmSaisieFactureService.Button2Click(Sender: TObject);
begin
edDesign_sce.Clear;
edpu.Clear;
edqte.Clear;

end;

procedure TfrmSaisieFactureService.cbTypeServiceCloseUp(Sender: TObject);
var
  Ts : TTypeServiceArray;
  i : integer;
  Psql,vCode_ts : string;
begin
  Psql :=' where design_ts = '+QuotedStr(cbTypeService.Text);
  Ts := dm.selectTypeServices(Psql);

  for I := Low(Ts) to High(Ts) do
    begin
      vCode_ts := Ts[i].Scode_ts;
    end;
    edCodeTypeSce.Text:=vCode_ts;

end;

procedure TfrmSaisieFactureService.edCodeCltDblClick(Sender: TObject);
begin
  vFormclt := 'SFS';
  frmSelectClientFacturation.ShowModal;
end;

procedure TfrmSaisieFactureService.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
cbTypeService.Clear;

end;

procedure TfrmSaisieFactureService.FormCreate(Sender: TObject);
begin
with st_factureService do
  begin
    Cells[0,0] := 'Service';
    Cells[1,0] := 'PU';
    Cells[2,0] := 'Qte';
    Cells[3,0] := 'PT';
    Cells[4,0] := 'TypSce'
  end;

end;

procedure TfrmSaisieFactureService.FormShow(Sender: TObject);
var
  Ts : TTypeServiceArray;
  i : integer;
  Psql : string;
begin
  eddate.Date := Now;
  Psql :='';
  Ts := dm.selectTypeServices(Psql);

  for I := Low(Ts) to High(Ts) do
    begin
      cbTypeService.Items.Add(Ts[i].Sdesign_ts);
    end;
end;

end.
